function [M4Nodes, M4Elements, StepBCs, missingnodes] ...
    = CreateINPfilefrom3DDataset(vertices_MaskPtCloud, XYZDispPtCloud, INPWriteFolder)
%| Inputs:
%|      vertices_MaskPtCloud
%|              - element vertices derived from voxelized mesh
%|              - output by HexMesh3D_Abaqus8Node.m
%|      XYZDispPtCloud
%|              - displacement vector: n x 6 matrix
%|                  Column 1-3: X, Y, Z vector position coordinates
%|                  Column 4-6: X, Y, Z displacement magnitude
%|              - output by MakePtClouds.m
%|      INPWriteFolder
%|              - Folder location to create text files of node, element and displacement data

%| Outputs:
%|      M4Nodes
%|              - Unique Node coordinates for ABAQUS input file (*.inp)
%|      M4Elements
%|              - Unique Element definitions for ABAQUS input file (*.inp)
%|      StepBCs
%|              - 3D Displacments for ABAQUS input file (*.inp)
%|      missingnodes
%|              - error handling
%|                  returns # missing nodes if all nodes are not included
%|                  in element definitions


% Create ABAQUS input data (nodes, elements, displacements)
tic
[~, M4Nodes, M4Elements, StepBCs, missingnodes] ...
    = CreateAbaqusInputData_unique(vertices_MaskPtCloud, XYZDispPtCloud);
% Error handling - check that all nodes are included in Elements
% nodesmatch = 1;
% while nodesmatch == 1
%     if missingnodes == 1
%         S = 'Missing Nodes. Data NOT written to file ...';
%         disp (S);
%         nodesmatch = 0;
%         return
%     end
    
disp('Step BC Matrix Created. Writing Element Data to file'); 

% Provided that nodes are all there ... 
% Write ABAQUS input data (nodes, elements, displacements) to files


%% write .inp for just structure :: to be used with injectDVC code
% write nodes: convert Nodes to physical coordinate
[~,Kl,~]  = fileparts(INPWriteFolder);
disp('3.  Writing Nodes');
Nodes     = cell(length(M4Nodes)+9,1);
Nodes(1)  = cellstr('*Heading'); 
Nodes(2)  = cellstr(['** Job name: ' Kl 'Model name: Model-1']); 
Nodes(3)  = cellstr('** Generated by: Abaqus/CAE 2016'); 
Nodes(4)  = cellstr('*Preprint, echo=NO, model=NO, history=NO, contact=NO'); 
Nodes(5)  = cellstr('**'); 
Nodes(6)  = cellstr('** PARTS'); 
Nodes(7)  = cellstr('**'); 
Nodes(8)  = cellstr('*Part, name=sample'); 
Nodes(9)  = cellstr('*Node');   %Generate Nodes in Input File

for ix=1:length(M4Nodes)
    Nodes(9+ix) = cellstr(['      ' num2str(M4Nodes(ix,1)) ', ' num2str(M4Nodes(ix,2))  ...
                               ', ' num2str(M4Nodes(ix,3)) ', ' num2str(M4Nodes(ix,4))]); 
end 
    
%% Generate Elements in Input File
disp('4.  Writing elements');
Ele     = cell(length(M4Elements)+1,1);
Ele(1)  =  cellstr('*ELEMENT, ELSET=Set1, TYPE=C3D8R');
for ix=1:size(M4Elements,1)
    Ele(1+ix) = cellstr([num2str(M4Elements(ix,1)) ', ' num2str(M4Elements(ix,2)) ', ' ...
                         num2str(M4Elements(ix,3)) ', ' num2str(M4Elements(ix,4)) ', ' ...
                         num2str(M4Elements(ix,5)) ', ' num2str(M4Elements(ix,6)) ', ' ...
                         num2str(M4Elements(ix,7)) ', ' num2str(M4Elements(ix,8)) ', ' ...
                         num2str(M4Elements(ix,9))]); 
end 

%%
% Poisson's ratio,              Young's Modulus [Pa],           
  MatP.nu    = 0.3;             MatP.E  = 210E9; 
% Material Name
  MatP.Mat = 'Cast_Iron';       MatP.type  = 'E';
disp('5.  Writing Materials Orientation and Assembly');
Assmp     =  cell(16,1);
Assmp(1)  =  cellstr('*Orientation, name=Ori-2');
Assmp(2)  =  cellstr('1., 0., 0., 0., 1., 0.');
Assmp(3)  =  cellstr('3, 0.');
Assmp(4)  =  cellstr('** Section: Section-1');
Assmp(5)  =  cellstr(['*Solid Section, elset=Set1, orientation=Ori-2, material=' MatP.Mat]);
Assmp(6)  =  cellstr(',');
Assmp(7)  =  cellstr('*End Part');
Assmp(8)  =  cellstr('**');
Assmp(9)  =  cellstr('**');
Assmp(10) =  cellstr('** ASSEMBLY');
Assmp(11) =  cellstr('**');
Assmp(12) =  cellstr('*Assembly, name=Assembly');
Assmp(13) =  cellstr('**');
Assmp(14) =  cellstr('*Instance, name=sample-1, part=sample');
Assmp(15) =  cellstr('*End Instance');
Assmp(16) =  cellstr('**');

%%
disp('6.  Writing instances and node lists');
patchASSEM = cell(length(StepBCs)/3*2,1);
count=0;
for k=1:3:size(StepBCs,1)
    if ~isnan(StepBCs(k,4))
        count=count+1;
        patchASSEM(count) =  cellstr(strcat(['*Nset, nset=_PickedSet',...
                    num2str(StepBCs(k,1)), ', internal, instance=sample-1']));
        count=count+1;
        patchASSEM(count)   =  cellstr([num2str(StepBCs(k,1)),',']);
    end
end

%% Materials Prop
disp('7.  Writing Materil propreties');
Mate     =  cell(17,1);
Mate(1)  =  cellstr('*End Assembly');
Mate(2)  =  cellstr('** ');
Mate(3)  =  cellstr('** MATERIALS');
Mate(4)  =  cellstr('** ');
Mate(5)  =  cellstr(['*Material, name=' MatP.Mat]);
if  MatP.type == 'A'
    Mate(6)  =  cellstr('*Elastic, type=ANISOTROPIC');
    C = MatP.Stiffness;
    if C(1,1) < 1e6; 	C = C.*1e9;       	disp('Check Modulus Units .. Corretced');    end
    Mate(7)  =  cellstr([' ',num2str(C(1,1)),', ',num2str(C(1,2)),', ',num2str(C(2,2)),', ' ...
                             num2str(C(1,3)),', ',num2str(C(2,3)),', ',num2str(C(3,3)),... 
                            ',          0.,          0.' ]);
    Mate(8)  =  cellstr(['          0., ',num2str(C(4,4)),...
                        ',          0.,          0.,          0.,       0., ',...
                            num2str(C(5,5)),',          0. ']);
    Mate(9)  =  cellstr(['          0.,          0.,          0.,          0.,  ',...
                            num2str(C(6,6))]);
elseif MatP.type == 'R'
    Mate(6)  =  cellstr('*Plastic');
    if MatP.E < 1e6;    MatP.E=MatP.E*1e9;	disp('Check Modulus Units .. Corretced');    end
	Mate(7)  =  cellstr([' ',num2str(MatP.E),', ',num2str(MatP.nu),', ',num2str(MatP.yield),', ' ...
                             num2str(MatP.Exponent),', ',num2str(MatP.Yield_offset)]);
    Mate(8)  =  cellstr('** ');
    Mate(9)  =  cellstr('** ');
elseif MatP.type == 'E'
    Mate(6)  =  cellstr('*Elastic');
    if MatP.E < 1e6;    MatP.E=MatP.E*1e9;	disp('Check Modulus Units .. Corretced');    end
    Mate(7)  =  cellstr([' ', num2str(MatP.E) ,', ', num2str(MatP.nu)]);
    Mate(8)  =  cellstr('** ');
    Mate(9)  =  cellstr('** ');
end

Mate(10) =  cellstr('** ----------------------------------------------------------------');
Mate(11) =  cellstr('** ');
Mate(12) =  cellstr('** STEP: Step-1');
Mate(13) =  cellstr('** ');
Mate(14) =  cellstr('*Step, name=Step-1, nlgeom=NO');
Mate(15) =  cellstr('*Static');
Mate(16) =  cellstr('1., 1., 1e-05, 1.');
Mate(17) =  cellstr('** ');

%% write with boundray conditions
disp('8.  Writing Boundary Conditions');
patchBC    =  cell(length(StepBCs)/3*5+2,1);
patchBC(1) =  cellstr('** BOUNDARY CONDITIONS');
patchBC(2) =  cellstr('**');
count = 0;
for k=1:3:length(StepBCs)
    if ~isnan(StepBCs(k,4))
        count = count+1;
        patchBC(2+count) = cellstr(strcat(['** Name: BC-', num2str(StepBCs(k,1)),...
                                        ' Type: Displacement/Rotation']));
        patchBC(2+count+1) = cellstr('*Boundary');
        patchBC(2+count+2) = cellstr(strcat(['_PickedSet',  num2str(StepBCs(k,1)),...
                                        ', 1, 1, ',     num2str(StepBCs(k,4))]));
        patchBC(2+count+3)   = cellstr(strcat(['_PickedSet',num2str(StepBCs(k,1)),...
                                         ', 2, 2, ', num2str(StepBCs(k+1,4))]));
        patchBC(2+count+4)   = cellstr(strcat(['_PickedSet',num2str(StepBCs(k,1)),...
                                         ', 3, 3, ', num2str(StepBCs(k+2,4))]));
        count = count+4;
    end
end

%% Write outputfile
finalform = [Nodes;Ele;Assmp;patchASSEM;Mate;patchBC];
fprintf('9.  Writing BC .. ');
BCf = [INPWriteFolder '\' Kl '_Model.inp'];
fileID = fopen(BCf,'w');
for i=1:size(finalform,1)
    stri = finalform(i);
    if ~cellfun('isempty',stri)
        fprintf(fileID,'%s\n',char(stri));
    end
end
fclose(fileID);
fprintf('Done\nCheck %s for the abaqus .inp model in %1.1f minutes\n',BCf,toc/60);
   
end